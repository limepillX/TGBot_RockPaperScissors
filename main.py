import ast
import logging
from random import randint

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

m_id = None
raitings = None
API_TOKEN = 'TOKEN'

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


def writerating(r):
    data = open("raiting.txt", "w")
    data.write(str(r))
    data.close()


def readrating():
    global raitings
    data = open("raiting.txt", "r")
    raitings = ast.literal_eval(data.read())
    data.close()
    return raitings


@dp.callback_query_handler(text="home")
async def home(call: types.CallbackQuery):
    global m_id
    await start(call.message)


@dp.callback_query_handler(text="exit")
async def exit_bot(call: types.CallbackQuery):
    await bot.delete_message(message_id=call.message.message_id, chat_id=call.message.chat.id)
    global m_id
    m_id = None


@dp.message_handler(Text('@justacoldbot'))
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = message.from_user.username
    await bot.delete_message(message_id=message.message_id, chat_id=message.chat.id)
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(InlineKeyboardButton(text='–ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞ üóø‚úÇüìë', callback_data="RPS"))
    markup.add(InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç–µ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥üìà', callback_data="raiting"))
    markup.add(InlineKeyboardButton(text='–í—ã–π—Ç–∏ –∏–∑ –±–æ—Ç–∞‚ùå', callback_data="exit"))
    a = await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{user}</b>\n\n–ß—Ç–æ –í–∞–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã —Å–¥–µ–ª–∞—Ç—å?', reply_markup=markup)
    global m_id
    if m_id:
        await bot.delete_message(message_id=m_id, chat_id=message.chat.id)
    m_id = a.message_id


@dp.callback_query_handler(text="raiting")
async def send_random_value(call: types.CallbackQuery):
    readrating()
    user = call.from_user.username
    text = '–ö–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞| <b>' + str(raitings['RPS'][str(user)]) + '</b>'
    await call.message.answer(f'–†–µ–π—Ç–∏–Ω–≥ <b>{user}üìà\n{text}</b>')
    global m_id
    if m_id:
        await bot.delete_message(message_id=m_id, chat_id=call.message.chat.id)
    m_id = None
    await bot.delete_message(message_id=call.message.message_id, chat_id=call.message.chat.id)
    await exit_bot(call)


@dp.callback_query_handler(text="RPS")
async def send_random_value(call: types.CallbackQuery):
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup.add(InlineKeyboardButton(text='–ö–∞–º–µ–Ω—å üóø', callback_data="RPS_1"))
    markup.add(InlineKeyboardButton(text='–ù–æ–∂–Ω–∏—Ü—ã ‚úÇ', callback_data="RPS_2"))
    markup.add(InlineKeyboardButton(text='–ë—É–º–∞–≥–∞ üìë', callback_data="RPS_3"))
    a = await call.message.answer('–ö–∞–∫ —Ö–æ–¥–∏—Ç–µ?', reply_markup=markup)
    global m_id
    if m_id:
        await bot.delete_message(message_id=m_id, chat_id=call.message.chat.id)
    m_id = a.message_id


@dp.callback_query_handler(text_contains="RPS_")
async def send_random_value(call: types.CallbackQuery):
    readrating()
    global raitings
    variants = {1: '–ö–∞–º–µ–Ω—å', 2: '–ù–æ–∂–Ω–∏—Ü—ã', 3: '–ë—É–º–∞–≥–∞'}
    user = call.from_user.username
    bot_choice = randint(1, 3)
    user_choice = int(call.data[-1])
    text = '–û—à–∏–±–∫–∞'
    if user not in raitings['RPS']:
        raitings['RPS'][user] = 0
    if user_choice == bot_choice + 1 or user_choice == bot_choice - 2:
        raitings['RPS'][user] -= 1
        text = "ü§ñ<b>–ë–æ—Ç</b> –ø–æ–±–µ–¥–∏–ª"
    elif user_choice == bot_choice - 1 or user_choice == bot_choice + 2:
        raitings['RPS'][user] += 1
        text = f"üòå<b>{user}</b> –ø–æ–±–µ–¥–∏–ª"
    else:
        text = "üòê<b>–ù–∏—á—å—è</b>"
    writerating(raitings)
    markup = types.InlineKeyboardMarkup()  # —Å–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await call.message.answer(
        f'{user} –≤—ã–±—Ä–∞–ª <b>{variants[user_choice]}</b>, –±–æ—Ç –≤—ã–±—Ä–∞–ª <b>{variants[bot_choice]}</b>\n<i>{text}</i>')
    markup.add(InlineKeyboardButton(text=f'–ù–æ–≤–∞—è –∏–≥—Ä–∞üé≤', callback_data="RPS"))
    markup.add(InlineKeyboardButton(text=f'–ù–∞ –≥–ª–∞–≤–Ω—É—éüèö', callback_data="home"))
    a = await call.message.answer('–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', reply_markup=markup)
    global m_id
    if m_id:
        await bot.delete_message(message_id=m_id, chat_id=call.message.chat.id)
    m_id = a.message_id


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
